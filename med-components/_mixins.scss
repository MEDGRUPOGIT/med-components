//
// breakpoints
//

@mixin breakpoint-up($name, $breakpoints: $med-grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @error 'breakpoint `#{$name}` not found in `#{$breakpoints}`';
  }
}

@mixin breakpoint-down($name, $breakpoints: $med-grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @error 'breakpoint `#{$name}` not found in `#{$breakpoints}`';
  }
}

@mixin breakpoint-between($lower, $upper, $breakpoints: $med-grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @error 'breakpoint `#{$upper}` not found in `#{$breakpoints}`';
  } @else if $min == null {
    @error 'breakpoint `#{$lower}` not found in `#{$breakpoints}`';
  }
}

@mixin breakpoint-only($name, $breakpoints: $med-grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max: breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @error 'breakpoint `#{$next}` not found in `#{$breakpoints}`';
  } @else if $min == null {
    @error 'breakpoint `#{$name}` not found in `#{$breakpoints}`';
  }
}

//
// tipografia
//

@mixin font-face($font-name, $font-path, $weight, $style, $svg-id) {
  @font-face {
    font-family: quote($font-name);
    src: url($font-path + ".eot");
    src: url($font-path + ".eot?#iefix") format("embedded-opentype"),
      url($font-path + ".woff") format("woff"),
      url($font-path + ".svg##{$svg-id}") format("svg");
    font-weight: $weight;
    font-style: unquote($style);
  }
}

//
// utils
//

@mixin landscape($orientation: landscape) {
  @media screen and (orientation: $orientation) {
    @content;
  }
}

//
// devices
//

@mixin iphone-x-range {
  @media (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait),
    (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait),
    (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait) {
    @content;
  }
}

@mixin platform($platform) {
  @if $platform == "android" {
    .platform-android {
      @content;
    }
  } @else if $platform == "ios" {
    .platform-ios {
      @content;
    }
  } @else if $platform == "windows" {
    .plt-electron.plt-desktop {
      @content;
    }
  } @else if $platform == "mac" {
    .plt-desktop .platform-macintel {
      @content;
    }
  } @else if $platform == "desktop" {
    .plt-electron.plt-desktop {
      @content;
    }
  }
}

//
// theme
//

@mixin generate-custom-theme($name) {
  :root {
    .theme-#{$name} {
      @each $color-name, $value in $medsoft-colors {
        @if $color-name != 'neutral-light' and $color-name != 'neutral-dark'{
          $value: map-get($medsoft-colors, $color-name);

          $contrast: map-get($value, contrast);
          $darkest: map-get($value, darkest);
          $dark: map-get($value, dark);
          $medium: map-get($value, medium);
          $light: map-get($value, light);
          $lightest: map-get($value, lightest);
          $gradient: map-get($value, gradient);

          --med-color-#{$color-name}-contrast: #{$contrast} !important;
          --med-color-#{$color-name}-contrast-rgb: #{color-to-rgb-list($contrast)};

          --med-color-#{$color-name}-darkest: #{$darkest};
          --med-color-#{$color-name}-darkest-rgb: #{color-to-rgb-list($darkest)};

          --med-color-#{$color-name}-dark: #{$dark};
          --med-color-#{$color-name}-dark-rgb: #{color-to-rgb-list($dark)};

          --med-color-#{$color-name}-medium: #{$medium};
          --med-color-#{$color-name}-medium-rgb: #{color-to-rgb-list($medium)};

          --med-color-#{$color-name}-light: #{$light};
          --med-color-#{$color-name}-light-rgb: #{color-to-rgb-list($light)};

          --med-color-#{$color-name}-lightest: #{$lightest};
          --med-color-#{$color-name}-lightest-rgb: #{color-to-rgb-list($lightest)};

          --med-color-#{$color-name}-gradient: #{$gradient};
        } @else {
          $value: map-get($medsoft-colors, $color-name);

          $contrast: map-get($value, contrast);
          $w40: map-get($value, 40);
          $w30: map-get($value, 30);
          $w20: map-get($value, 20);
          $w10: map-get($value, 10);
          $prime: map-get($value, prime);
          $gradient: map-get($value, gradient);

          --med-color-#{$color-name}-contrast: #{$contrast};
          --med-color-#{$color-name}-contrast-rgb: #{color-to-rgb-list($contrast)};

          --med-color-#{$color-name}-40: #{$w40};
          --med-color-#{$color-name}-40-rgb: #{color-to-rgb-list($w40)};

          --med-color-#{$color-name}-30: #{$w30};
          --med-color-#{$color-name}-30-rgb: #{color-to-rgb-list($w30)};

          --med-color-#{$color-name}-20: #{$w20};
          --med-color-#{$color-name}-20-rgb: #{color-to-rgb-list($w20)};

          --med-color-#{$color-name}-10: #{$w10};
          --med-color-#{$color-name}-10-rgb: #{color-to-rgb-list($w10)};

          --med-color-#{$color-name}-prime: #{$prime};
          --med-color-#{$color-name}-prime-rgb: #{color-to-rgb-list($prime)};

          --med-color-#{$color-name}-gradient: #{$gradient};
        }
      }
    }
  }

  .theme-#{$name} {
    @each $color-name, $value in $medsoft-colors {
      @if $color-name != 'neutral-light' and $color-name != 'neutral-dark'{
        .ion-color-#{$color-name} {
           @include generate-medsoft-color($color-name);
        }
      } @else {
        .ion-color-#{$color-name} {
          @include generate-medsoft-neutral-color($color-name);
        }
      }
    }
  }
}

@mixin generate-medsoft-color($color-name) {
  $value: map-get($medsoft-colors, $color-name);

  $contrast: map-get($value, contrast);
  $darkest: map-get($value, darkest);
  $dark: map-get($value, dark);
  $medium: map-get($value, medium);
  $light: map-get($value, light);
  $lightest: map-get($value, lightest);
  $gradient: map-get($value, gradient);

  --med-color-contrast: var(--med-color-#{$color-name}-contrast, #{$contrast}) !important;
  --med-color-contrast-rgb: var(--med-color-#{$color-name}-contrast-rgb, #{color-to-rgb-list($contrast)}) !important;

  --med-color-darkest: var(--med-color-#{$color-name}-darkest, #{$darkest}) !important;
  --med-color-darkest-rgb: var(--med-color-#{$color-name}-darkest-rgb, #{color-to-rgb-list($darkest)}) !important;

  --med-color-dark: var(--med-color-#{$color-name}-dark, #{$dark}) !important;
  --med-color-dark-rgb: var(--med-color-#{$color-name}-dark-rgb, #{color-to-rgb-list($dark)}) !important;

  --med-color-medium: var(--med-color-#{$color-name}-medium, #{$medium}) !important;
  --med-color-medium-rgb: var(--med-color-#{$color-name}-medium-rgb, #{color-to-rgb-list($medium)}) !important;

  --med-color-light: var(--med-color-#{$color-name}-light, #{$light}) !important;
  --med-color-light-rgb: var(--med-color-#{$color-name}-light-rgb, #{color-to-rgb-list($light)}) !important;

  --med-color-lightest: var(--med-color-#{$color-name}-lightest, #{$lightest}) !important;
  --med-color-lightest-rgb: var(--med-color-#{$color-name}-lightest-rgb, #{color-to-rgb-list($lightest)}) !important;

  --med-color-gradient: var(--med-color-#{$color-name}-gradient, #{$gradient}) !important;
}

@mixin generate-medsoft-neutral-color($color-name) {
  $value: map-get($medsoft-colors, $color-name);

  $contrast: map-get($value, contrast);
  $w40: map-get($value, 40);
  $w30: map-get($value, 30);
  $w20: map-get($value, 20);
  $w10: map-get($value, 10);
  $prime: map-get($value, prime);
  $gradient: map-get($value, gradient);

  --med-color-contrast: var(--med-color-#{$color-name}-contrast, #{$contrast}) !important;
  --med-color-contrast-rgb: var(--med-color-#{$color-name}-contrast-rgb, #{color-to-rgb-list($contrast)}) !important;

  --med-color-darkest: var(--med-color-#{$color-name}-40, #{$w40}) !important;
  --med-color-darkest-rgb: var(--med-color-#{$color-name}-40-rgb, #{color-to-rgb-list($w40)}) !important;

  --med-color-dark: var(--med-color-#{$color-name}-30, #{$w30}) !important;
  --med-color-dark-rgb: var(--med-color-#{$color-name}-30-rgb, #{color-to-rgb-list($w30)}) !important;

  --med-color-light: var(--med-color-#{$color-name}-20, #{$w20}) !important;
  --med-color-light-rgb: var(--med-color-#{$color-name}-20-rgb, #{color-to-rgb-list($w20)}) !important;

  --med-color-lightest: var(--med-color-#{$color-name}-10, #{$w10}) !important;
  --med-color-lightest-rgb: var(--med-color-#{$color-name}-10-rgb, #{color-to-rgb-list($w10)}) !important;

  --med-color-medium: var(--med-color-#{$color-name}-prime, #{$prime}) !important;
  --med-color-medium-rgb: var(--med-color-#{$color-name}-prime-rgb, #{color-to-rgb-list($prime)}) !important;

  --med-color-gradient: var(--med-color-#{$color-name}-gradient, #{$gradient}) !important;
}

@mixin generate-medsoft-color-classes {
  @each $color-name, $value in $medsoft-colors {
    @if $color-name != 'neutral-light' and $color-name != 'neutral-dark'{
      .ion-color-#{$color-name} {
         @include generate-medsoft-color($color-name);
      }
    } @else {
      .ion-color-#{$color-name} {
        @include generate-medsoft-neutral-color($color-name);
      }
    }
  }
}
