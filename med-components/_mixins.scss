//
// breakpoints
//

@mixin breakpoint-up($name, $breakpoints: $med-grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @error 'breakpoint `#{$name}` not found in `#{$breakpoints}`';
  }
}

@mixin breakpoint-down($name, $breakpoints: $med-grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @error 'breakpoint `#{$name}` not found in `#{$breakpoints}`';
  }
}

@mixin breakpoint-between($lower, $upper, $breakpoints: $med-grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @error 'breakpoint `#{$upper}` not found in `#{$breakpoints}`';
  } @else if $min == null {
    @error 'breakpoint `#{$lower}` not found in `#{$breakpoints}`';
  }
}

@mixin breakpoint-only($name, $breakpoints: $med-grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max: breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @error 'breakpoint `#{$next}` not found in `#{$breakpoints}`';
  } @else if $min == null {
    @error 'breakpoint `#{$name}` not found in `#{$breakpoints}`';
  }
}

//
// tipografia
//

@mixin font-face($font-name, $font-path, $weight, $style, $svg-id) {
  @font-face {
    font-family: quote($font-name);
    src: url($font-path + ".eot");
    src: url($font-path + ".eot?#iefix") format("embedded-opentype"),
      url($font-path + ".woff") format("woff"),
      url($font-path + ".svg##{$svg-id}") format("svg");
    font-weight: $weight;
    font-style: unquote($style);
  }
}

//
// utils
//

@mixin landscape($orientation: landscape) {
  @media screen and (orientation: $orientation) {
    @content;
  }
}

//
// devices
//

@mixin iphone-x-range {
  @media (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait),
    (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait),
    (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait) {
    @content;
  }
}

@mixin platform($platform) {
  @if $platform == "android" {
    .platform-android {
      @content;
    }
  } @else if $platform == "ios" {
    .platform-ios {
      @content;
    }
  } @else if $platform == "windows" {
    .plt-electron.plt-desktop {
      @content;
    }
  } @else if $platform == "mac" {
    .plt-desktop .platform-macintel {
      @content;
    }
  } @else if $platform == "desktop" {
    .plt-electron.plt-desktop {
      @content;
    }
  }
}

//
// theme
//

@mixin generate-custom-theme($name) {
  :root {
    .theme-#{$name} {
      @each $key, $value in $colors {
        $base: map-get(map-get($colors, $key), base);
        $contrast: map-get(map-get($colors, $key), contrast);
        $shade: map-get(map-get($colors, $key), shade);
        $tint: map-get(map-get($colors, $key), tint);

        --ion-color-#{$key}: #{$base};
        --ion-color-#{$key}-rgb: #{list-color-rgb($base)};
        --ion-color-#{$key}-contrast: #{$contrast};
        --ion-color-#{$key}-contrast-rgb: #{list-color-rgb($contrast)};
        --ion-color-#{$key}-shade: #{$shade};
        --ion-color-#{$key}-tint: #{$tint};
      }
    }
  }

  .theme-#{$name} {
    @each $key, $value in $colors {
      .ion-color-#{$key} {
        $base: map-get(map-get($colors, $key), base);
        $contrast: map-get(map-get($colors, $key), contrast);
        $shade: map-get(map-get($colors, $key), shade);
        $tint: map-get(map-get($colors, $key), tint);

        --ion-color-base: var(--ion-color-#{$key}, #{$base}) !important;
        --ion-color-base-rgb: var(--ion-color-#{$key}-rgb, #{list-color-rgb($base)}) !important;
        --ion-color-contrast: var(--ion-color-#{$key}-contrast, #{$contrast}) !important;
        --ion-color-contrast-rgb: var(--ion-color-#{$key}-contrast-rgb, #{list-color-rgb($contrast)}) !important;
        --ion-color-shade: var(--ion-color-#{$key}-shade, #{$shade}) !important;
        --ion-color-tint: var(--ion-color-#{$key}-tint, #{$tint}) !important;
      }
    }
  }
}
