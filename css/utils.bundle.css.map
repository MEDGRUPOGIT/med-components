{"version":3,"sourceRoot":"","sources":["../src/themes/ionic.functions.font.scss","../src/themes/ionic.mixins.scss","../src/css/padding.scss","../src/css/float-elements.scss","../src/css/text-alignment.scss","../src/css/text-transformation.scss","../src/css/flex-utils.scss","../src/css/display.scss"],"names":[],"mappings":"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;;AD/fN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AGLI;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AHuHF;EGpJA;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;AHuHF;EGpJA;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;AHuHF;EGpJA;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;AHuHF;EGpJA;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;EAGF;IACE;;;AJrCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AILI;AACE;EACA;;;AAGF;AACE;EACA;;;AAGF;AACE;EACA;;;AJwIF;EIpJA;AACE;IACA;;;EAGF;AACE;IACA;;;EAGF;AACE;IACA;;;AJwIF;EIpJA;AACE;IACA;;;EAGF;AACE;IACA;;;EAGF;AACE;IACA;;;AJwIF;EIpJA;AACE;IACA;;;EAGF;AACE;IACA;;;EAGF;AACE;IACA;;;AJwIF;EIpJA;AACE;IACA;;;EAGF;AACE;IACA;;;EAGF;AACE;IACA;;;ACjBN;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAOF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAOF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAOF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AN5FF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AMXA;EACE;;;AAUE;EACE;;;AAOF;EACE;;;ANsIF;EM/IA;IACE;;;ANuLF;EMhLA;IACE;;;ANsIF;EM/IA;IACE;;;ANuLF;EMhLA;IACE;;;ANsIF;EM/IA;IACE;;;ANuLF;EMhLA;IACE;;;ANsIF;EM/IA;IACE;;;ANuLF;EMhLA;IACE","file":"utils.bundle.css","sourcesContent":["@use \"sass:math\";\r\n\r\n$baselineSize: 16px !default;\r\n$baselineUnit: 1rem !default;\r\n\r\n/**\r\n * Convert a font size to a dynamic font size.\r\n * Fonts that participate in Dynamic Type should use\r\n * dynamic font sizes.\r\n * @param size - The initial font size including the unit (i.e. px or pt)\r\n * @param unit (optional) - The unit to convert to. Use this if you want to\r\n * convert to a unit other than $baselineUnit.\r\n */\r\n@function dynamic-font($size, $unit: $baselineUnit) {\r\n  @return (math.div($size, $baselineSize)) * $unit;\r\n}\r\n\r\n/**\r\n * Convert a font size to a dynamic font size but impose\r\n * a maximum font size.\r\n * @param size - The initial font size including the unit (i.e. px or pt)\r\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\r\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\r\n * convert to a unit other than $baselineUnit.\r\n */\r\n@function dynamic-font-max($size, $maxScale, $unit: $baselineUnit) {\r\n  $baseScale: dynamic-font($size, $unit);\r\n  $maxScale: $size * $maxScale;\r\n\r\n  @return min($baseScale, $maxScale);\r\n}\r\n\r\n/**\r\n * Convert a font size to a dynamic font size but impose\r\n * a minimum font size.\r\n * @param size - The initial font size including the unit (i.e. px or pt)\r\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\r\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\r\n * convert to a unit other than $baselineUnit.\r\n */\r\n@function dynamic-font-min($minScale, $size, $unit: $baselineUnit) {\r\n  $baseScale: dynamic-font($size, $unit);\r\n  $minScale: $size * $minScale;\r\n\r\n  @return max($minScale, $baseScale);\r\n}\r\n\r\n/**\r\n * Convert a font size to a dynamic font size but impose\r\n * maximum and minimum font sizes.\r\n * @param size - The initial font size including the unit (i.e. px or pt)\r\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\r\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\r\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\r\n * convert to a unit other than $baselineUnit.\r\n */\r\n@function dynamic-font-clamp($minScale, $baseSize, $maxScale, $unit: $baselineUnit) {\r\n  $baseScale: dynamic-font($baseSize, $unit);\r\n  $maxScale: $baseSize * $maxScale;\r\n  $minScale: $baseSize * $minScale;\r\n\r\n  @return clamp($minScale, $baseScale, $maxScale);\r\n}\r\n","\r\n/**\r\n * A heuristic that applies CSS to tablet\r\n * viewports.\r\n *\r\n * Usage:\r\n * @include tablet-viewport() {\r\n *   :host {\r\n *     background-color: green;\r\n *   }\r\n * }\r\n */\r\n@mixin tablet-viewport() {\r\n  @media screen and (min-width: 768px) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/**\r\n * A heuristic that applies CSS to mobile\r\n * viewports (i.e. phones, not tablets).\r\n *\r\n * Usage:\r\n * @include mobile-viewport() {\r\n *   :host {\r\n *     background-color: blue;\r\n *   }\r\n * }\r\n */\r\n@mixin mobile-viewport() {\r\n  @media screen and (max-width: 767px) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin input-cover() {\r\n  @include position(0, null, null, 0);\r\n  @include margin(0);\r\n\r\n  position: absolute;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  border: 0;\r\n  background: transparent;\r\n  cursor: pointer;\r\n\r\n  appearance: none;\r\n  outline: none;\r\n\r\n  &::-moz-focus-inner {\r\n    border: 0;\r\n  }\r\n}\r\n\r\n@mixin visually-hidden() {\r\n  position: absolute;\r\n\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  margin: 0;\r\n  padding: 0;\r\n\r\n  border: 0;\r\n  outline: 0;\r\n  clip: rect(0 0 0 0);\r\n\r\n  opacity: 0;\r\n  overflow: hidden;\r\n\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n}\r\n\r\n@mixin text-inherit() {\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  font-style: inherit;\r\n  font-weight: inherit;\r\n  letter-spacing: inherit;\r\n  text-decoration: inherit;\r\n  text-indent: inherit;\r\n  text-overflow: inherit;\r\n  text-transform: inherit;\r\n  text-align: inherit;\r\n  white-space: inherit;\r\n  color: inherit;\r\n}\r\n\r\n@mixin button-state() {\r\n  @include position(0, 0, 0, 0);\r\n\r\n  position: absolute;\r\n\r\n  content: \"\";\r\n\r\n  opacity: 0;\r\n}\r\n\r\n// Font smoothing\r\n// --------------------------------------------------\r\n\r\n@mixin font-smoothing() {\r\n  -moz-osx-font-smoothing: grayscale;\r\n  -webkit-font-smoothing: antialiased;\r\n}\r\n\r\n// Get the key from a map based on the index\r\n@function index-to-key($map, $index) {\r\n  $keys: map-keys($map);\r\n\r\n  @return nth($keys, $index);\r\n}\r\n\r\n\r\n// Breakpoint Mixins\r\n// ---------------------------------------------------------------------------------\r\n\r\n// Breakpoint viewport sizes and media queries.\r\n//\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n//\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\r\n//\r\n// The map defined in the `$screen-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// ---------------------------------------------------------------------------------\r\n\r\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n//\r\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    576px\r\n@function breakpoint-min($name, $breakpoints: $screen-breakpoints) {\r\n  $min: map-get($breakpoints, $name);\r\n\r\n  @return if($name != index-to-key($breakpoints, 1), $min, null);\r\n}\r\n\r\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\r\n// Useful for making responsive utilities.\r\n//\r\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"\"  (Returns a blank string)\r\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"-sm\"\r\n@function breakpoint-infix($name, $breakpoints: $screen-breakpoints) {\r\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\r\n}\r\n\r\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n// Makes the @content apply to the given breakpoint and wider.\r\n@mixin media-breakpoint-up($name, $breakpoints: $screen-breakpoints) {\r\n  $min: breakpoint-min($name, $breakpoints);\r\n  @if $min {\r\n    @media (min-width: $min) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n//\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: $screen-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\r\n  $n: index($breakpoint-names, $name);\r\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n}\r\n\r\n// Maximum breakpoint width. Null for the smallest (first) breakpoint.\r\n// The maximum value is reduced by 0.02px to work around the limitations of\r\n// `min-` and `max-` prefixes and viewports with fractional widths.\r\n//\r\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\r\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\t// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\r\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\t// See https://bugs.webkit.org/show_bug.cgi?id=178261\r\n//\r\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    767.98px\r\n@function breakpoint-max($name, $breakpoints: $screen-breakpoints) {\r\n  $max: map-get($breakpoints, $name);\r\n  @return if($max and $max > 0, $max - .02, null);\r\n}\r\n\r\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n// Makes the @content apply to the given breakpoint and narrower.\r\n@mixin media-breakpoint-down($name, $breakpoints: $screen-breakpoints) {\r\n  $max: breakpoint-max($name, $breakpoints);\r\n  @if $max {\r\n    @media (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n// Text Direction - ltr / rtl\r\n//\r\n// CSS defaults to use the ltr css, and adds [dir=rtl] selectors\r\n// to override ltr defaults.\r\n// ----------------------------------------------------------\r\n\r\n@mixin multi-dir() {\r\n  @content;\r\n\r\n  // $root: #{&};\r\n  // @at-root [dir] {\r\n  //   #{$root} {\r\n  //     @content;\r\n  //   }\r\n  // }\r\n}\r\n\r\n@mixin rtl() {\r\n  $root: #{&};\r\n\r\n  $rootSplit: str-split($root, \",\");\r\n  $selectors: #{add-root-selector($root, \"[dir=rtl]\")};\r\n  $selectorsSplit: str-split($selectors, \",\");\r\n\r\n  $hostContextSelectors: ();\r\n  $restSelectors: ();\r\n  $dirSelectors: ();\r\n\r\n  // Selectors must be split into individual selectors in case the browser\r\n  // doesn't support a specific selector.\r\n  // For example, Firefox and Safari doesn't support `:host-context()`.\r\n  // If an invalid selector is used, then the entire group of selectors\r\n  // will be ignored.\r\n  // @link https://www.w3.org/TR/selectors-3/#grouping\r\n  @each $selector in $selectorsSplit {\r\n    // Group the selectors back into a single selector to optimize the output.\r\n    @if str-index($selector, \":host-context\") {\r\n      $hostContextSelectors: append($hostContextSelectors, $selector, comma);\r\n    } @else {\r\n      // Group the selectors back into a single selector to optimize the output.\r\n      $restSelectors: append($restSelectors, $selector, comma);\r\n    }\r\n  }\r\n\r\n  // Supported by Chrome.\r\n  @if length($hostContextSelectors) > 0 {\r\n    @at-root #{$hostContextSelectors} {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  // Supported by all browsers.\r\n  @if length($restSelectors) > 0 {\r\n    @at-root #{$restSelectors} {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  // If browser can support `:dir()`, then add the `:dir()` selectors.\r\n  @supports selector(:dir(rtl)) {\r\n    // Adding :dir() in case the browser doesn't support `:host-context()` and does support `:dir()`.\r\n    // `:host-context()` is added:\r\n    // - through the `add-root-selector()` function.\r\n    // - first so that it takes precedence over `:dir()`.\r\n    // For example,\r\n    // - Firefox doesn't support `:host-context()`, but does support `:dir()`.\r\n    // - Safari doesn't support `:host-context()`, but Safari 16.4+ supports `:dir()`\r\n    // @link https://webkit.org/blog/13966/webkit-features-in-safari-16-4/\r\n    // -- However, there is a Webkit bug on v16 that prevents `:dir()` from working when\r\n    // -- the app direction is changed dynamically. v17+ works fine.\r\n    // -- @link https://bugs.webkit.org/show_bug.cgi?id=257133\r\n\r\n    // Supported by Firefox.\r\n    @at-root #{add-root-selector($root, \":dir(rtl)\", false)} {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin ltr() {\r\n  @content;\r\n}\r\n\r\n\r\n// SVG Background Image Mixin\r\n// @param {string} $svg\r\n// ----------------------------------------------------------\r\n@mixin svg-background-image($svg, $flip-rtl: false) {\r\n  $url: url-encode($svg);\r\n  $viewBox: str-split(str-extract($svg, \"viewBox='\", \"'\"), \" \");\r\n\r\n  @if $flip-rtl != true or $viewBox == null {\r\n    @include multi-dir() {\r\n      background-image: url(\"data:image/svg+xml;charset=utf-8,#{$url}\");\r\n    }\r\n  } @else {\r\n    $transform: \"transform='translate(#{nth($viewBox, 3)}, 0) scale(-1, 1)'\";\r\n    $flipped-url: $svg;\r\n    $flipped-url: str-replace($flipped-url, \"<path\", \"<path #{$transform}\");\r\n    $flipped-url: str-replace($flipped-url, \"<line\", \"<line #{$transform}\");\r\n    $flipped-url: str-replace($flipped-url, \"<polygon\", \"<polygon #{$transform}\");\r\n    $flipped-url: url-encode($flipped-url);\r\n\r\n    @include ltr () {\r\n      background-image: url(\"data:image/svg+xml;charset=utf-8,#{$url}\");\r\n    }\r\n    @include rtl() {\r\n      background-image: url(\"data:image/svg+xml;charset=utf-8,#{$flipped-url}\");\r\n    }\r\n  }\r\n}\r\n\r\n// Add property horizontal\r\n// @param {string} $start\r\n// @param {string} $end\r\n// ----------------------------------------------------------\r\n@mixin property-horizontal($prop, $start, $end: $start) {\r\n  @if $start == 0 and $end == 0 {\r\n    #{$prop}-left: $start;\r\n    #{$prop}-right: $end;\r\n\r\n  } @else {\r\n    -webkit-#{$prop}-start: $start;\r\n    #{$prop}-inline-start: $start;\r\n    -webkit-#{$prop}-end: $end;\r\n    #{$prop}-inline-end: $end;\r\n  }\r\n}\r\n\r\n// Add property for all directions\r\n// @param {string} $prop\r\n// @param {string} $top\r\n// @param {string} $end\r\n// @param {string} $bottom\r\n// @param {string} $start\r\n// @param {boolean} $content include content or use default\r\n// ----------------------------------------------------------\r\n@mixin property($prop, $top, $end: $top, $bottom: $top, $start: $end) {\r\n  @include property-horizontal($prop, $start, $end);\r\n  #{$prop}-top: $top;\r\n  #{$prop}-bottom: $bottom;\r\n}\r\n\r\n// Add padding horizontal\r\n// @param {string} $start\r\n// @param {string} $end\r\n// ----------------------------------------------------------\r\n@mixin padding-horizontal($start, $end: $start) {\r\n  @include property-horizontal(padding, $start, $end);\r\n}\r\n\r\n// Add padding for all directions\r\n// @param {string} $top\r\n// @param {string} $end\r\n// @param {string} $bottom\r\n// @param {string} $start\r\n// ----------------------------------------------------------\r\n@mixin padding($top, $end: $top, $bottom: $top, $start: $end) {\r\n  @include property(padding, $top, $end, $bottom, $start);\r\n}\r\n\r\n// Add margin horizontal\r\n// @param {string} $start\r\n// @param {string} $end\r\n// ----------------------------------------------------------\r\n@mixin margin-horizontal($start, $end: $start) {\r\n  @include property-horizontal(margin, $start, $end);\r\n}\r\n\r\n// Add margin for all directions\r\n// @param {string} $top\r\n// @param {string} $end\r\n// @param {string} $bottom\r\n// @param {string} $start\r\n// ----------------------------------------------------------\r\n@mixin margin($top, $end: $top, $bottom: $top, $start: $end) {\r\n  @include property(margin, $top, $end, $bottom, $start);\r\n}\r\n\r\n// Add position horizontal\r\n// @param {string} $start - amount to position start\r\n// @param {string} $end - amount to left: 0; end\r\n// ----------------------------------------------------------\r\n@mixin position-horizontal($start: null, $end: null) {\r\n  @if $start == $end {\r\n    @include multi-dir() {\r\n      left: $start;\r\n      right: $end;\r\n    }\r\n  } @else {\r\n    @at-root {\r\n      @supports (inset-inline-start: 0) {\r\n        & {\r\n          inset-inline-start: $start;\r\n          inset-inline-end: $end;\r\n        }\r\n      }\r\n    }\r\n\r\n    // TODO FW-3766\r\n    @at-root {\r\n      @supports not (inset-inline-start: 0) {\r\n        & {\r\n          @include ltr() {\r\n            left: $start;\r\n            right: $end;\r\n          }\r\n          @include rtl() {\r\n            left: unset;\r\n            right: unset;\r\n\r\n            left: $end;\r\n            right: $start;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Add position for all directions\r\n// @param {string} $top\r\n// @param {string} $end\r\n// @param {string} $bottom\r\n// @param {string} $start\r\n// ----------------------------------------------------------\r\n@mixin position($top: null, $end: null, $bottom: null, $start: null) {\r\n  @include position-horizontal($start, $end);\r\n  top: $top;\r\n  bottom: $bottom;\r\n}\r\n\r\n// Add border for all directions\r\n// @param {string} $top\r\n// @param {string} $end\r\n// @param {string} $bottom\r\n// @param {string} $start\r\n// ----------------------------------------------------------\r\n@mixin border($top, $end: $top, $bottom: $top, $start: $end) {\r\n  @include property(border, $top, $end, $bottom, $start);\r\n}\r\n\r\n// Add border radius for all directions\r\n// @param {string} $top-start\r\n// @param {string} $top-end\r\n// @param {string} $bottom-end\r\n// @param {string} $bottom-start\r\n// ----------------------------------------------------------\r\n@mixin border-radius($top-start, $top-end: $top-start, $bottom-end: $top-start, $bottom-start: $top-end) {\r\n  @if $top-start == $top-end and $top-start == $bottom-end and $top-start == $bottom-start {\r\n    @include multi-dir() {\r\n      border-radius: $top-start;\r\n    }\r\n  } @else {\r\n    @include ltr() {\r\n      border-top-left-radius: $top-start;\r\n      border-top-right-radius: $top-end;\r\n      border-bottom-right-radius: $bottom-end;\r\n      border-bottom-left-radius: $bottom-start;\r\n    }\r\n\r\n    @include rtl() {\r\n      border-top-left-radius: $top-end;\r\n      border-top-right-radius: $top-start;\r\n      border-bottom-right-radius: $bottom-start;\r\n      border-bottom-left-radius: $bottom-end;\r\n    }\r\n  }\r\n}\r\n\r\n// Add direction for all directions\r\n// @param {string} $dir - Direction on LTR\r\n@mixin direction($dir) {\r\n  $other-dir: null;\r\n\r\n  @if $dir == ltr {\r\n    $other-dir: rtl;\r\n  } @else {\r\n    $other-dir: ltr;\r\n  }\r\n\r\n  @include ltr() {\r\n    direction: $dir;\r\n  }\r\n  @include rtl() {\r\n    direction: $other-dir;\r\n  }\r\n}\r\n\r\n// Add float for all directions\r\n// @param {string} $side\r\n// @param {string} $decorator - !important\r\n@mixin float($side, $decorator: null) {\r\n  @if $side == start {\r\n    @include ltr() {\r\n      float: left $decorator;\r\n    }\r\n    @include rtl() {\r\n      float: right $decorator;\r\n    }\r\n  } @else if $side == end {\r\n    @include ltr() {\r\n      float: right $decorator;\r\n    }\r\n    @include rtl() {\r\n      float: left $decorator;\r\n    }\r\n  } @else {\r\n    @include multi-dir() {\r\n      float: $side $decorator;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin background-position($horizontal, $horizontal-amount: null, $vertical: null, $vertical-amount: null) {\r\n  @if $horizontal == start or $horizontal == end {\r\n    $horizontal-ltr: null;\r\n    $horizontal-rtl: null;\r\n    @if $horizontal == start {\r\n      $horizontal-ltr: left;\r\n      $horizontal-rtl: right;\r\n    } @else {\r\n      $horizontal-ltr: right;\r\n      $horizontal-rtl: left;\r\n    }\r\n\r\n    @include ltr() {\r\n      background-position: $horizontal-ltr $horizontal-amount $vertical $vertical-amount;\r\n    }\r\n    @include rtl() {\r\n      background-position: $horizontal-rtl $horizontal-amount $vertical $vertical-amount;\r\n    }\r\n  } @else {\r\n    @include multi-dir() {\r\n      background-position: $horizontal $horizontal-amount $vertical $vertical-amount;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin transform-origin($x-axis, $y-axis: null) {\r\n  @if $x-axis == start {\r\n    @include ltr() {\r\n      transform-origin: left $y-axis;\r\n    }\r\n    @include rtl() {\r\n      transform-origin: right $y-axis;\r\n    }\r\n  } @else if $x-axis == end {\r\n    @include ltr() {\r\n      transform-origin: right $y-axis;\r\n    }\r\n    @include rtl() {\r\n      transform-origin: left $y-axis;\r\n    }\r\n  } @else if $x-axis == left or $x-axis == right {\r\n    @include multi-dir() {\r\n      transform-origin: $x-axis $y-axis;\r\n    }\r\n  } @else {\r\n    @include ltr() {\r\n      transform-origin: $x-axis $y-axis;\r\n    }\r\n    @include rtl() {\r\n      transform-origin: calc(100% - #{$x-axis}) $y-axis;\r\n    }\r\n  }\r\n}\r\n\r\n// Add transform for all directions\r\n// @param {string} $transforms - comma separated list of transforms\r\n@mixin transform($transforms...) {\r\n  $extra: null;\r\n\r\n  $x: null;\r\n  $ltr-translate: null;\r\n  $rtl-translate: null;\r\n\r\n  @each $transform in $transforms {\r\n    @if (str-index($transform, translate3d)) {\r\n      $transform: str-replace($transform, 'translate3d(');\r\n      $transform: str-replace($transform, ')');\r\n\r\n      $coordinates: str-split($transform, ',');\r\n\r\n      $x: nth($coordinates, 1);\r\n      $y: nth($coordinates, 2);\r\n      $z: nth($coordinates, 3);\r\n\r\n      $ltr-translate: translate3d($x, $y, $z);\r\n      $rtl-translate: translate3d(calc(-1 * #{$x}), $y, $z);\r\n    } @else {\r\n      @if $extra == null {\r\n        $extra: $transform;\r\n      } @else {\r\n        $extra: $extra $transform;\r\n      }\r\n    }\r\n  }\r\n\r\n  @if $x == '0' or $x == null {\r\n    @include multi-dir() {\r\n      transform: $ltr-translate $extra;\r\n    }\r\n  } @else {\r\n    @include ltr() {\r\n      transform: $ltr-translate $extra;\r\n    }\r\n\r\n    @include rtl() {\r\n      transform: $rtl-translate $extra;\r\n    }\r\n  }\r\n}\r\n","@import \"../themes/ionic.globals\";\r\n@import \"../themes/ionic.mixins\";\r\n\r\n\r\n// Element Space\r\n// --------------------------------------------------\r\n// Creates padding and margin attributes to be used on\r\n// any element\r\n\r\n$padding: var(--ion-padding, 16px);\r\n$margin: var(--ion-margin, 16px);\r\n\r\n// Padding\r\n// --------------------------------------------------\r\n\r\n.ion-no-padding {\r\n  --padding-start: 0;\r\n  --padding-end: 0;\r\n  --padding-top: 0;\r\n  --padding-bottom: 0;\r\n\r\n  @include padding(0);\r\n}\r\n\r\n.ion-padding {\r\n  --padding-start: #{$padding};\r\n  --padding-end: #{$padding};\r\n  --padding-top: #{$padding};\r\n  --padding-bottom: #{$padding};\r\n\r\n  @include padding($padding);\r\n}\r\n\r\n.ion-padding-top {\r\n  --padding-top: #{$padding};\r\n\r\n  @include padding($padding, null, null, null);\r\n}\r\n\r\n.ion-padding-start {\r\n  --padding-start: #{$padding};\r\n\r\n  @include padding-horizontal($padding, null);\r\n}\r\n\r\n.ion-padding-end {\r\n  --padding-end: #{$padding};\r\n\r\n  @include padding-horizontal(null, $padding);\r\n}\r\n\r\n.ion-padding-bottom {\r\n  --padding-bottom: #{$padding};\r\n\r\n  @include padding(null, null, $padding, null);\r\n}\r\n\r\n.ion-padding-vertical {\r\n  --padding-top: #{$padding};\r\n  --padding-bottom: #{$padding};\r\n\r\n  @include padding($padding, null, $padding, null);\r\n}\r\n\r\n.ion-padding-horizontal {\r\n  --padding-start: #{$padding};\r\n  --padding-end: #{$padding};\r\n\r\n  @include padding-horizontal($padding);\r\n}\r\n\r\n\r\n// Margin\r\n// --------------------------------------------------\r\n\r\n.ion-no-margin {\r\n  --margin-start: 0;\r\n  --margin-end: 0;\r\n  --margin-top: 0;\r\n  --margin-bottom: 0;\r\n\r\n  @include margin(0);\r\n}\r\n\r\n.ion-margin {\r\n  --margin-start: #{$margin};\r\n  --margin-end: #{$margin};\r\n  --margin-top: #{$margin};\r\n  --margin-bottom: #{$margin};\r\n\r\n  @include margin($margin);\r\n}\r\n\r\n.ion-margin-top {\r\n  --margin-top: #{$margin};\r\n\r\n  @include margin($margin, null, null, null);\r\n}\r\n\r\n.ion-margin-start {\r\n  --margin-start: #{$margin};\r\n\r\n  @include margin-horizontal($margin, null);\r\n}\r\n\r\n.ion-margin-end {\r\n  --margin-end: #{$margin};\r\n\r\n  @include margin-horizontal(null, $margin);\r\n}\r\n\r\n.ion-margin-bottom {\r\n  --margin-bottom: #{$margin};\r\n\r\n  @include margin(null, null, $margin, null);\r\n}\r\n\r\n.ion-margin-vertical {\r\n  --margin-top: #{$margin};\r\n  --margin-bottom: #{$margin};\r\n\r\n  @include margin($margin, null, $margin, null);\r\n}\r\n\r\n.ion-margin-horizontal {\r\n  --margin-start: #{$margin};\r\n  --margin-end: #{$margin};\r\n\r\n  @include margin-horizontal($margin);\r\n}\r\n","@import \"../themes/ionic.globals\";\r\n@import \"../themes/ionic.mixins\";\r\n\r\n// Float Elements\r\n// --------------------------------------------------\r\n// Creates float classes based on screen size\r\n\r\n@each $breakpoint in map-keys($screen-breakpoints) {\r\n  $infix: breakpoint-infix($breakpoint, $screen-breakpoints);\r\n\r\n  @include media-breakpoint-up($breakpoint, $screen-breakpoints) {\r\n    // Provide `.ion-float-{bp}-{side}` classes for floating the element based\r\n    // on the breakpoint and side\r\n    .ion-float#{$infix}-left {\r\n      @include float(left, !important);\r\n    }\r\n\r\n    .ion-float#{$infix}-right {\r\n      @include float(right, !important);\r\n    }\r\n\r\n    .ion-float#{$infix}-start {\r\n      @include float(start, !important);\r\n    }\r\n\r\n    .ion-float#{$infix}-end {\r\n      @include float(end, !important);\r\n    }\r\n  }\r\n}\r\n","@import \"../themes/ionic.globals\";\r\n@import \"../themes/ionic.mixins\";\r\n\r\n// Text Alignment\r\n// --------------------------------------------------\r\n// Creates text alignment attributes based on screen size\r\n\r\n@each $breakpoint in map-keys($screen-breakpoints) {\r\n  $infix: breakpoint-infix($breakpoint, $screen-breakpoints);\r\n\r\n  @include media-breakpoint-up($breakpoint, $screen-breakpoints) {\r\n    // Provide `.ion-text-{bp}` classes for aligning the text based\r\n    // on the breakpoint\r\n    .ion-text#{$infix}-center {\r\n      text-align: center !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-justify {\r\n      text-align: justify !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-start {\r\n      text-align: start !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-end {\r\n      text-align: end !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-left {\r\n      text-align: left !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-right {\r\n      text-align: right !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-nowrap {\r\n      white-space: nowrap !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-wrap {\r\n      white-space: normal !important;\r\n    }\r\n  }\r\n}\r\n","@import \"../themes/ionic.globals\";\r\n@import \"../themes/ionic.mixins\";\r\n\r\n// Text Transformation\r\n// --------------------------------------------------\r\n// Creates text transform attributes based on screen size\r\n\r\n@each $breakpoint in map-keys($screen-breakpoints) {\r\n  $infix: breakpoint-infix($breakpoint, $screen-breakpoints);\r\n\r\n  @include media-breakpoint-up($breakpoint, $screen-breakpoints) {\r\n    // Provide `.ion-text-{bp}` classes for transforming the text based\r\n    // on the breakpoint\r\n    .ion-text#{$infix}-uppercase {\r\n      /* stylelint-disable-next-line declaration-no-important */\r\n      text-transform: uppercase !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-lowercase {\r\n      /* stylelint-disable-next-line declaration-no-important */\r\n      text-transform: lowercase !important;\r\n    }\r\n\r\n    .ion-text#{$infix}-capitalize {\r\n      /* stylelint-disable-next-line declaration-no-important */\r\n      text-transform: capitalize !important;\r\n    }\r\n  }\r\n}\r\n","// Flex Utilities\r\n// --------------------------------------------------\r\n// Creates flex classes to align flex containers\r\n// and items\r\n\r\n// Align Self\r\n// --------------------------------------------------\r\n\r\n.ion-align-self-start {\r\n  align-self: flex-start !important;\r\n}\r\n\r\n.ion-align-self-end {\r\n  align-self: flex-end !important;\r\n}\r\n\r\n.ion-align-self-center {\r\n  align-self: center !important;\r\n}\r\n\r\n.ion-align-self-stretch {\r\n  align-self: stretch !important;\r\n}\r\n\r\n.ion-align-self-baseline {\r\n  align-self: baseline !important;\r\n}\r\n\r\n.ion-align-self-auto {\r\n  align-self: auto !important;\r\n}\r\n\r\n\r\n// Flex Wrap\r\n// --------------------------------------------------\r\n\r\n.ion-wrap {\r\n  flex-wrap: wrap !important;\r\n}\r\n\r\n.ion-nowrap {\r\n  flex-wrap: nowrap !important;\r\n}\r\n\r\n.ion-wrap-reverse {\r\n  flex-wrap: wrap-reverse !important;\r\n}\r\n\r\n\r\n// Justify Content\r\n// --------------------------------------------------\r\n\r\n.ion-justify-content-start {\r\n  justify-content: flex-start !important;\r\n}\r\n\r\n.ion-justify-content-center {\r\n  justify-content: center !important;\r\n}\r\n\r\n.ion-justify-content-end {\r\n  justify-content: flex-end !important;\r\n}\r\n\r\n.ion-justify-content-around {\r\n  justify-content: space-around !important;\r\n}\r\n\r\n.ion-justify-content-between {\r\n  justify-content: space-between !important;\r\n}\r\n\r\n.ion-justify-content-evenly {\r\n  justify-content: space-evenly !important;\r\n}\r\n\r\n\r\n// Align Items\r\n// --------------------------------------------------\r\n\r\n.ion-align-items-start {\r\n  align-items: flex-start !important;\r\n}\r\n\r\n.ion-align-items-center {\r\n  align-items: center !important;\r\n}\r\n\r\n.ion-align-items-end {\r\n  align-items: flex-end !important;\r\n}\r\n\r\n.ion-align-items-stretch {\r\n  align-items: stretch !important;\r\n}\r\n\r\n.ion-align-items-baseline {\r\n  align-items: baseline !important;\r\n}\r\n","@import \"../themes/ionic.globals\";\r\n@import \"../themes/ionic.mixins\";\r\n\r\n// Display\r\n// --------------------------------------------------\r\n// Modifies display of a particular element based on the given classes\r\n\r\n.ion-hide {\r\n  display: none !important;\r\n}\r\n\r\n// Adds hidden classes\r\n@each $breakpoint in map-keys($screen-breakpoints) {\r\n  $infix: breakpoint-infix($breakpoint, $screen-breakpoints);\r\n\r\n  @include media-breakpoint-up($breakpoint, $screen-breakpoints) {\r\n    // Provide `ion-hide-{bp}-up` classes for hiding the element based\r\n    // on the breakpoint\r\n    .ion-hide#{$infix}-up {\r\n      display: none !important;\r\n    }\r\n  }\r\n\r\n  @include media-breakpoint-down($breakpoint, $screen-breakpoints) {\r\n    // Provide `ion-hide-{bp}-down` classes for hiding the element based\r\n    // on the breakpoint\r\n    .ion-hide#{$infix}-down {\r\n      display: none !important;\r\n    }\r\n  }\r\n}\r\n"]}